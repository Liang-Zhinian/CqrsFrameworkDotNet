// <auto-generated />
using Business.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using System;

namespace Business.Infra.Data.Migrations
{
    [DbContext(typeof(BusinessDbContext))]
    [Migration("20180611175023_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("EquivalentLocaleName");

                    b.Property<string>("RegionString");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Branding", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("LogoURL");

                    b.Property<string>("PageColor1");

                    b.Property<string>("PageColor2");

                    b.Property<string>("PageColor3");

                    b.Property<string>("PageColor4");

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("Branding");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Location", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.LocationAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("ForeignZip");

                    b.Property<double>("Latitude");

                    b.Property<string>("LocationId");

                    b.Property<double>("Longitude");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Street2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("LocationAddress");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.LocationContact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("Email");

                    b.Property<string>("Email2");

                    b.Property<string>("LocationId");

                    b.Property<string>("Phone");

                    b.Property<string>("Phone2");

                    b.Property<string>("Phone3");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("LocationContact");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.LocationImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("ImageURL");

                    b.Property<string>("LocationId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationImage");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Staff", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("Bio");

                    b.Property<string>("DisplayName");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsMale");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("ForeignZip");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StaffId");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Street2");

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("StaffAddress");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffContact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("Email");

                    b.Property<string>("Email2");

                    b.Property<string>("Phone");

                    b.Property<string>("Phone2");

                    b.Property<string>("Phone3");

                    b.Property<string>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("StaffContact");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffLoginCredential", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("Password");

                    b.Property<string>("StaffId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("StaffLoginCredential");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffLoginLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(32)");

                    b.Property<string>("StaffId");

                    b.Property<string>("LocationId");

                    b.HasKey("Id", "StaffId", "LocationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLoginLocation");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.TenantAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("ForeignZip");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Street2");

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("TenantAddress");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.TenantContact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(32)");

                    b.Property<string>("Email");

                    b.Property<string>("Email2");

                    b.Property<string>("Phone");

                    b.Property<string>("Phone2");

                    b.Property<string>("Phone3");

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("TenantContact");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("StandardName");

                    b.HasKey("Id");

                    b.ToTable("TimeZone");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Branding", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Tenant", "Tenant")
                        .WithOne("Branding")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.Branding", "TenantId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Location", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Tenant", "Tenant")
                        .WithMany("Locations")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.LocationAddress", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Location", "Location")
                        .WithOne("Address")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.LocationAddress", "LocationId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.LocationContact", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Location", "Location")
                        .WithOne("Contact")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.LocationContact", "LocationId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.LocationImage", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Location", "Location")
                        .WithMany("AdditionalLocationImages")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.Staff", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Tenant", "Tenant")
                        .WithMany("Staffs")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffAddress", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Staff", "Staff")
                        .WithOne("Address")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.StaffAddress", "StaffId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffContact", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Staff", "Staff")
                        .WithOne("Contact")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.StaffContact", "StaffId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffLoginCredential", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Staff", "Staff")
                        .WithOne("LoginCredential")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.StaffLoginCredential", "StaffId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.StaffLoginLocation", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Location", "Location")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Infra.Data.ReadModel.Security.Staff", "Staff")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.TenantAddress", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Tenant", "Tenant")
                        .WithOne("Address")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.TenantAddress", "TenantId");
                });

            modelBuilder.Entity("Business.Infra.Data.ReadModel.Security.TenantContact", b =>
                {
                    b.HasOne("Business.Infra.Data.ReadModel.Security.Tenant", "Tenant")
                        .WithOne("Contact")
                        .HasForeignKey("Business.Infra.Data.ReadModel.Security.TenantContact", "TenantId");
                });
#pragma warning restore 612, 618
        }
    }
}
