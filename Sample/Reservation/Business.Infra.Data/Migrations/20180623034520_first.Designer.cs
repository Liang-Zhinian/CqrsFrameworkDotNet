// <auto-generated />
using Business.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace Business.Infra.Data.Migrations
{
    [DbContext(typeof(BusinessDbContext))]
    [Migration("20180623034520_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Business.Domain.Models.Branding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Logo")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("PageColor1")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor3")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor4")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId")
                        .IsUnique();

                    b.ToTable("Branding");
                });

            modelBuilder.Entity("Business.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(4000)");

                    b.Property<Guid>("LocationAddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SiteId1");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("SiteId1");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Business.Domain.Models.LocationAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TimeZoneId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("SiteId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("LocationAddress");
                });

            modelBuilder.Entity("Business.Domain.Models.LocationImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteId");

                    b.ToTable("LocationImage");
                });

            modelBuilder.Entity("Business.Domain.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EquivalentLocaleName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RegionString")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Business.Domain.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BrandingId");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Business.Domain.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("CanLoginAllLocations");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(4000)");

                    b.Property<bool>("IsMale");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SiteId1");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("SiteId1");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Business.Domain.Models.StaffLoginLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id", "StaffId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLoginLocation");
                });

            modelBuilder.Entity("Business.Domain.Models.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TimeZone");
                });

            modelBuilder.Entity("Business.Domain.Models.Branding", b =>
                {
                    b.HasOne("Business.Domain.Models.Site", "Site")
                        .WithOne("Branding")
                        .HasForeignKey("Business.Domain.Models.Branding", "SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("BrandingId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("Branding");

                            b1.HasOne("Business.Domain.Models.Branding")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "BrandingId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Models.Location", b =>
                {
                    b.HasOne("Business.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.Site")
                        .WithMany("Locations")
                        .HasForeignKey("SiteId1");

                    b.OwnsOne("Business.Domain.Models.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid?>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ContactName")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PrimaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SecondaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Location");

                            b1.HasOne("Business.Domain.Models.Location")
                                .WithOne("ContactInformation")
                                .HasForeignKey("Business.Domain.Models.ContactInformation", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("LocationId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("Location");

                            b1.HasOne("Business.Domain.Models.Location")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Models.LocationAddress", b =>
                {
                    b.HasOne("Business.Domain.Models.Location", "Location")
                        .WithOne("Address")
                        .HasForeignKey("Business.Domain.Models.LocationAddress", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Business.Domain.Models.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<Guid>("LocationAddressId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("LocationAddress");

                            b1.HasOne("Business.Domain.Models.LocationAddress")
                                .WithOne("Geolocation")
                                .HasForeignKey("Business.Domain.Models.Geolocation", "LocationAddressId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Models.PostalAddress", "PostalAddress", b1 =>
                        {
                            b1.Property<Guid>("LocationAddressId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .HasColumnName("City")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("CountryCode")
                                .HasColumnName("CountryCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PostalCode")
                                .HasColumnName("PostalCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StateProvince")
                                .HasColumnName("StateProvince")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnName("StreetAddress")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StreetAddress2")
                                .HasColumnName("StreetAddress2")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("LocationAddress");

                            b1.HasOne("Business.Domain.Models.LocationAddress")
                                .WithOne("PostalAddress")
                                .HasForeignKey("Business.Domain.Models.PostalAddress", "LocationAddressId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("LocationAddressId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("LocationAddress");

                            b1.HasOne("Business.Domain.Models.LocationAddress")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "LocationAddressId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Models.LocationImage", b =>
                {
                    b.HasOne("Business.Domain.Models.Location", "Location")
                        .WithMany("AdditionalLocationImages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("LocationImageId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("LocationImage");

                            b1.HasOne("Business.Domain.Models.LocationImage")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "LocationImageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Models.Site", b =>
                {
                    b.OwnsOne("Business.Domain.Models.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("SiteId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ContactName")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PrimaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SecondaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Site");

                            b1.HasOne("Business.Domain.Models.Site")
                                .WithOne("ContactInformation")
                                .HasForeignKey("Business.Domain.Models.ContactInformation", "SiteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("SiteId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("Site");

                            b1.HasOne("Business.Domain.Models.Site")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "SiteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Models.Staff", b =>
                {
                    b.HasOne("Business.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.Site")
                        .WithMany("Staffs")
                        .HasForeignKey("SiteId1");

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("StaffId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("Staff");

                            b1.HasOne("Business.Domain.Models.Staff")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "StaffId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Models.StaffLoginLocation", b =>
                {
                    b.HasOne("Business.Domain.Models.Location", "Location")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Models.Staff", "Staff")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Business.Domain.Models.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("StaffLoginLocationId");

                            b1.Property<Guid>("StaffLoginLocationStaffId");

                            b1.Property<Guid>("StaffLoginLocationLocationId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnName("TenantId_Id")
                                .HasColumnType("varchar(36)");

                            b1.ToTable("StaffLoginLocation");

                            b1.HasOne("Business.Domain.Models.StaffLoginLocation")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Models.TenantId", "StaffLoginLocationId", "StaffLoginLocationStaffId", "StaffLoginLocationLocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
