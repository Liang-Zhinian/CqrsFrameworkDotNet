// <auto-generated />
using Business.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Business.Infra.Data.Migrations
{
    [DbContext(typeof(BusinessDbContext))]
    [Migration("20180709150817_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("book2business")
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Business.Domain.Entities.Branding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("PageColor1")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor3")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor4")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId")
                        .IsUnique();

                    b.ToTable("Branding");
                });

            modelBuilder.Entity("Business.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Business.Domain.Entities.LocationImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Image");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteId");

                    b.ToTable("LocationImage");
                });

            modelBuilder.Entity("Business.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EquivalentLocaleName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RegionString")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Business.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsLocatedAtAllLocations");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ResourceTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Business.Domain.Entities.ResourceLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id", "ResourceId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceLocation");
                });

            modelBuilder.Entity("Business.Domain.Entities.ResourceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ResourceStatus");
                });

            modelBuilder.Entity("Business.Domain.Entities.ResourceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ResourceType");
                });

            modelBuilder.Entity("Business.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DaysVisible");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("IsCalendarSubscriptionAllowed");

                    b.Property<bool>("IsDefault");

                    b.Property<Guid>("LayoutId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("WeekdayStart");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Business.Domain.Entities.ScheduleLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("TimeZoneId");

                    b.HasKey("Id");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("ScheduleLayout");
                });

            modelBuilder.Entity("Business.Domain.Entities.ScheduleLayoutTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AvailabilityCode");

                    b.Property<int>("DayOfWeek");

                    b.Property<string>("EndLabel")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("LayoutId")
                        .HasColumnType("char(36)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.ToTable("ScheduleLayoutTimeSlot");
                });

            modelBuilder.Entity("Business.Domain.Entities.Schedules.ScheduleType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleType");
                });

            modelBuilder.Entity("Business.Domain.Entities.ServiceCategories.IndustryStandardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ParentCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("IndustryStandardCategory");
                });

            modelBuilder.Entity("Business.Domain.Entities.ServiceCategories.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CancelOffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ScheduleTypeId");

                    b.Property<Guid>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleTypeId");

                    b.HasIndex("SiteId");

                    b.ToTable("ServiceCategory");
                });

            modelBuilder.Entity("Business.Domain.Entities.ServiceCategories.ServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<int>("DefaultTimeLength");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("IndustryStandardCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price");

                    b.Property<Guid>("ServiceCategoryId");

                    b.Property<Guid>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("IndustryStandardCategoryId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("SiteId");

                    b.ToTable("ServiceItem");
                });

            modelBuilder.Entity("Business.Domain.Entities.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Business.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("CanLoginAllLocations");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(4000)");

                    b.Property<bool>("IsMale");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Business.Domain.Entities.StaffLoginLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StaffId");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id", "StaffId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLoginLocation");
                });

            modelBuilder.Entity("Business.Domain.Entities.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TimeZone");
                });

            modelBuilder.Entity("Business.Domain.Entities.Branding", b =>
                {
                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithOne("Branding")
                        .HasForeignKey("Business.Domain.Entities.Branding", "SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.Location", b =>
                {
                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithMany("Locations")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Business.Domain.Entities.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid?>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ContactName")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PrimaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SecondaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Location","book2business");

                            b1.HasOne("Business.Domain.Entities.Location")
                                .WithOne("ContactInformation")
                                .HasForeignKey("Business.Domain.Entities.ContactInformation", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Entities.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.ToTable("Location","book2business");

                            b1.HasOne("Business.Domain.Entities.Location")
                                .WithOne("Geolocation")
                                .HasForeignKey("Business.Domain.Entities.Geolocation", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Entities.PostalAddress", "PostalAddress", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("CountryCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StateProvince")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StreetAddress2");

                            b1.ToTable("Location","book2business");

                            b1.HasOne("Business.Domain.Entities.Location")
                                .WithOne("PostalAddress")
                                .HasForeignKey("Business.Domain.Entities.PostalAddress", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Entities.LocationImage", b =>
                {
                    b.HasOne("Business.Domain.Entities.Location", "Location")
                        .WithMany("AdditionalLocationImages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.Resource", b =>
                {
                    b.HasOne("Business.Domain.Entities.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.ResourceStatus", "Status")
                        .WithMany("Resources")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.ResourceLocation", b =>
                {
                    b.HasOne("Business.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Resource", "Resource")
                        .WithMany("ResourceLocations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Business.Domain.Entities.ScheduleLayout", "Layout")
                        .WithMany("Schedules")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.ScheduleLayout", b =>
                {
                    b.HasOne("Business.Domain.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.ScheduleLayoutTimeSlot", b =>
                {
                    b.HasOne("Business.Domain.Entities.ScheduleLayout", "Layout")
                        .WithMany("TimeSlots")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.ServiceCategories.IndustryStandardCategory", b =>
                {
                    b.HasOne("Business.Domain.Entities.ServiceCategories.IndustryStandardCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.ServiceCategories.ServiceCategory", b =>
                {
                    b.HasOne("Business.Domain.Entities.Schedules.ScheduleType", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.ServiceCategories.ServiceItem", b =>
                {
                    b.HasOne("Business.Domain.Entities.ServiceCategories.IndustryStandardCategory", "IndustryStandardCategory")
                        .WithMany()
                        .HasForeignKey("IndustryStandardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.ServiceCategories.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.Site", b =>
                {
                    b.OwnsOne("Business.Domain.Entities.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("SiteId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ContactName")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PrimaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SecondaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Site","book2business");

                            b1.HasOne("Business.Domain.Entities.Site")
                                .WithOne("ContactInformation")
                                .HasForeignKey("Business.Domain.Entities.ContactInformation", "SiteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Business.Domain.Entities.TenantId", "TenantId", b1 =>
                        {
                            b1.Property<Guid>("SiteId");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("varchar(36)");

                            b1.ToTable("Site","book2business");

                            b1.HasOne("Business.Domain.Entities.Site")
                                .WithOne("TenantId")
                                .HasForeignKey("Business.Domain.Entities.TenantId", "SiteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Business.Domain.Entities.Staff", b =>
                {
                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithMany("Staffs")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Business.Domain.Entities.StaffLoginLocation", b =>
                {
                    b.HasOne("Business.Domain.Entities.Location", "Location")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Business.Domain.Entities.Staff", "Staff")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
